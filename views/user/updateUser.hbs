{{> user-header}}
<div class="container mt-5 mb-5">
  <div class="row">
    <div class="col-md-3">
      {{> profile-nav}}
    </div>
    <div class="col-md-9">
      <div class="card">
        <div class="card-body">
          <h4 class="card-title">Account Setting</h4>
          <form id="update-user-form">
            <div class="form-row">
              <div class="form-group col-md-6">
                <label for="name">Name</label>
                <input type="text" class="form-control" name="name" id="name" value="{{user.name}}">
                <span class="error" id="error-name"></span>
              </div>
              <div class="form-group col-md-6">
                <label for="email">Email</label>
                <input type="email" class="form-control" name="email" id="email" value="{{user.email}}">
                <span class="error" id="error-email"></span>
              </div>
            </div>
            <div class="form-row">
              <div class="form-group col-md-6">
                <label for="phone">Phone Number</label>
                <input type="text" class="form-control" id="phone" name="phone" value="{{user.phone}}">
                <span class="error" id="error-phone"></span>
                <a href="/profile/change-password" class="btn btn-outline-secondary mt-4" type="button">Change Password <i class="fas fa-edit"></i></a>
              </div>
            </div>
            
            <button type="submit" class="btn btn-outline-info mt-5">Save Changes</button>
            <a href="/profile" class="btn btn-outline-dark mt-5">Cancel</a>
          </form>

          <form id="otp-verification-form" action="/profile/verify-otp" method="POST" style="display: none;">
            <div class="form-row">
              <div class="form-group col-md-6">
                <p id="otpEmail" class="fw-bold"></p>
                <label for="otp">Enter OTP</label>
                <input type="hidden" id="otp" name="otp">
                <div class="otp-input">
                    <input type="text" maxlength="1" class="otp-box" required>
                    <input type="text" maxlength="1" class="otp-box" required>
                    <input type="text" maxlength="1" class="otp-box" required>
                    <input type="text" maxlength="1" class="otp-box" required>
                    <input type="text" maxlength="1" class="otp-box" required>
                    <input type="text" maxlength="1" class="otp-box" required>
                </div>
                <input type="hidden"  name="name" id="userName" value="{{user.name}}">
                <input type="hidden" name="email" id="new-email">
                <div id="otp-error" class="alert alert-danger" style="display: none;"></div>
              </div>
            </div>
            <button type="submit" class="btn btn-outline-info mt-5">Verify OTP</button>
            <a class="btn btn-outline-danger mt-5" href="/user/profile">Cancel</a>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
{{> footer}}
<script>
  const updateForm = document.getElementById('update-user-form');
  const emailField = document.getElementById('email');
  const phoneField = document.getElementById('phone');
  let isEmailChanged = false; // Track if email has been changed

  updateForm.addEventListener('submit', async function(event) {
    event.preventDefault(); // Prevent the default form submission

    const formData = new FormData(updateForm);
    const data = {};
    formData.forEach((value, key) => {
      data[key] = value;
    });

    if (isEmailChanged) {
      // Send OTP to new email if it has changed
      const newEmail = emailField.value.trim();

      try {
        const response = await fetch('/user/profile/send-otp', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ email: newEmail })
        });

        const responseData = await response.json();
        if (!responseData.success) {
          throw new Error('Failed to send OTP. Please try again.');
        }

        emailField.setAttribute('readonly', 'true');
        phoneField.setAttribute('readonly', 'true');
        document.getElementById('update-user-form').style.display = 'none';
        document.getElementById('otp-verification-form').style.display = 'block';
        document.getElementById('new-email').value = newEmail;
        document.getElementById('otpEmail').innerHTML = `OTP has been sent to ${newEmail}`;
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message
        });
      }
    } else {
      // Proceed with profile update without sending OTP
      try {
        const response = await fetch(`/profile/update-user`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        if (response.ok) {
          // Handle success
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Profile updated successfully!',
            showConfirmButton: false,
            timer: 1500
          }).then(() => {
            window.location.href = '/profile'
          });
        } else {
          // Handle error response
          const errorData = await response.json();
          handleErrors(errorData.errors);
        }
      } catch (error) {
        // Handle network error
        console.error('Network error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Network Error',
          text: error.message
        });
      }
    }
  });

  emailField.addEventListener('change', function() {
    const newEmail = emailField.value.trim();
    const originalEmail = "{{user.email}}";

    if (newEmail === '') {
      document.getElementById('error-email').textContent = 'Email cannot be empty';
      isEmailChanged = false;
      return;
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const isValidEmail = emailRegex.test(newEmail);

    if (!isValidEmail) {
      document.getElementById('error-email').textContent = 'Invalid email format';
      isEmailChanged = false;
      return;
    }

    if (newEmail !== originalEmail) {
      isEmailChanged = true;
    } else {
      isEmailChanged = false;
    }
  });

  const otpInputs = document.querySelectorAll('.otp-box');
  otpInputs.forEach((input, index) => {
    input.addEventListener('input', () => {
      if (input.value.length === 1 && index < otpInputs.length - 1) {
        otpInputs[index + 1].focus();
      }
      if (input.value.length === 0 && index > 0) {
        otpInputs[index - 1].focus();
      }
    });
  });

  function combineOtpValues() {
    let otpValue = '';
    otpInputs.forEach(input => {
      otpValue += input.value;
    });
    document.getElementById('otp').value = otpValue;
  }

  document.getElementById('otp-verification-form').addEventListener('submit', (event) => {
    event.preventDefault();
    combineOtpValues();

    const otp = document.getElementById('otp').value;
    const email = document.getElementById('new-email').value;

    fetch('/user/profile/verify-otp', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ otp: otp, email: email })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.fire({
          icon: 'success',
          title: 'Email updated successfully!',
          showConfirmButton: false,
          timer: 1500
        }).then(() => {
          window.location.href = '/profile';
        });
      } else {
        const otpErrorDiv = document.getElementById('otp-error');
        otpErrorDiv.innerText = data.message;
        otpErrorDiv.style.display = 'block';
        setTimeout(() => {
          otpErrorDiv.style.display = 'none';
        }, 2000);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      Swal.fire({
        icon: 'error',
        title: 'An error occurred',
        text: 'Please try again.',
      });
    });
  });

  function handleErrors(errors) {
    // Clear previous error messages
    document.querySelectorAll('.error').forEach(error => error.textContent = '');

    if (errors) {
      Object.keys(errors).forEach(key => {
        showError(`error-${key}`, errors[key].msg);
      });
    }
  }

  function showError(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
      errorElement.textContent = message;
    }
  }
</script>
