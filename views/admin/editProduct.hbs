{{> admin-header}}
<div class="content">
    <div class="container mt-5 mb-5">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3>Edit Product</h3>
            <div>
                <a href="/product/index" class="btn btn-outline-secondary me-2">Cancel</a>
                <button form="editForm" class="btn btn-outline-success">Save Changes</button>
            </div>
        </div>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb ms-1 mt-3">
                <li class="breadcrumb-item"><a href="/user/admin/dashboard">Dashboard</a></li>
                <li class="breadcrumb-item"><a href="/product/index">Products</a></li>
                <li class="breadcrumb-item active" aria-current="page">Edit Product</li>
            </ol>
        </nav>
        <form id="editForm" class="mt-3" enctype="multipart/form-data">
            <div class="form-group">
                <label for="title">Title:</label>
                <input type="text" class="form-control" name="title" id="title" value="{{product.title}}" >
                <span class="error" id="error-title"></span>
            </div>
            <div class="form-group">
                <label for="description">Description:</label>
                <textarea class="form-control" name="description" id="description" style="height: 200px;" >{{product.description}}</textarea>
                <span class="error" id="error-description"></span>
            </div>
            <div class="form-group">
                <label for="category">Category:</label>
                <select class="form-control form-select" name="category" id="category" >
                    {{#each categories}}
                        <option value="{{this._id}}" {{#if (eq this._id ../product.category)}}selected{{/if}}>{{this.title}}</option>
                    {{/each}}
                </select>
            </div>
            <div class="form-group">
                <label for="brand">Brand:</label>
                <select class="form-control form-select" name="brand" id="brand">
                    <option value="Apple" {{#if (eq product.brand 'Apple')}}selected{{/if}}>Apple</option>
                    <option value="Samsung" {{#if (eq product.brand 'Samsung')}}selected{{/if}}>Samsung</option>
                    <option value="Lenovo" {{#if (eq product.brand 'Lenovo')}}selected{{/if}}>Lenovo</option>
                    <option value="Oneplus" {{#if (eq product.brand 'Oneplus')}}selected{{/if}}>Oneplus</option>
                    <option value="Huawei" {{#if (eq product.brand 'Huawei')}}selected{{/if}}>Huawei</option>
                </select>
            </div>
            <div class="form-group">
                <label for="price">Price:</label>
                <input type="number" class="form-control" name="price" id="price" value="{{product.price}}" inputmode="numeric" >
                <span class="error" id="error-price"></span>
            </div>
            <div class="form-group">
                <label for="stock_count">Stock Count:</label>
                <input type="number" class="form-control" name="stock_count" id="stock_count" inputmode="numeric" value="{{product.stock_count}}" >
                <span class="error" id="error-stock_count"></span>
            </div>
            <div class="form-group mt-3">
                <label for="images">Images:</label>
                <input type="file" class="form-control-file" name="images" id="images" accept="image/*" multiple onchange="previewImages()">
            </div>
            <div class="form-group mt-2" id="image-preview">
                <!-- Show existing images here -->
                {{#each product.images}}
                    <div class="image-container">
                        <img src="{{this}}" class="img-thumbnail">
                        <button type="button" class="btn btn-danger btn-sm delete-image-btn" data-image="{{this}}"><i class="fa fa-trash" aria-hidden="true"></i> Delete</button>
                        <input type="hidden" id="existingImages" name="existingImages[]" value="{{this}}">
                    </div>
                {{/each}}
            </div>
        </form>
    </div>
</div>

<script>
    document.getElementById('editForm').addEventListener('submit', async function(event) {
        event.preventDefault(); // Prevent the default form submission

        const existingImages = document.querySelectorAll('input[name="existingImages[]"]');
        const newImages = document.getElementById('images').files;

        if (existingImages.length === 0 && newImages.length === 0) {
            Swal.fire({
                title: 'Warning',
                text: 'You must have at least one image.',
                icon: 'warning'
            });
            return; // Prevent form submission
        }


        const formData = new FormData(this);
        const productId = '{{product._id}}';

        try {
            const response = await fetch(`/product/update/${productId}`, {
                method: 'PUT',
                body: formData
            });

            if (response.ok) {
                Swal.fire({
                    title: 'Success',
                    text: 'Product updated successfully!',
                    icon: 'success'
                }).then(() => {
                    window.location.href = '/product/index';
                });
            } else {
                const errorData = await response.json();
                handleErrors(errorData.errors);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });

    function handleErrors(errors) {
        // Clear previous error messages
        document.querySelectorAll('.error').forEach(error => error.textContent = '');

        if (errors) {
            Object.keys(errors).forEach(key => {
                showError(`error-${key}`, errors[key].msg);
            });
        }
    }

    function showError(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
            errorElement.textContent = message;
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        const deleteButtons = document.querySelectorAll('.delete-image-btn');
        const productId = '{{product._id}}';
        deleteButtons.forEach(button => {
            button.addEventListener('click', async function () {
                const imagePath = this.getAttribute('data-image');
                const confirmation = await Swal.fire({
                    title: 'Are you sure?',
                    text: `Do you want to delete this image?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'Cancel'
                });

                if (confirmation.isConfirmed) {
                    try {
                        // Perform backend deletion using Fetch API or AJAX
                        const response = await fetch(`/product/delete-image/${productId}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ imagePath })
                        });

                        if (response.ok) {
                            // Remove the image preview from the UI
                            this.parentElement.remove();
                            Swal.fire('Deleted!', 'Image deleted successfully!', 'success');
                        } else {
                            throw new Error('Failed to delete image');
                        }
                    } catch (error) {
                        console.error('Error deleting image:', error);
                        Swal.fire('Failed!', 'Failed to delete image', 'error');
                    }
                }
            });
        });
    });

    function previewImages() {
        const preview = document.getElementById('image-preview');
        const existingImages = Array.from(preview.children); // Get existing images
        preview.innerHTML = ''; // Clear the preview

        existingImages.forEach(imageContainer => {
            preview.appendChild(imageContainer); // Re-add existing images
        });

        const files = document.getElementById('images').files;

        if (files) {
            Array.from(files).forEach(file => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const container = document.createElement('div');
                    container.classList.add('image-container');

                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.classList.add('img-thumbnail');

                    const deleteButton = document.createElement('button');
                    deleteButton.type = 'button';
                    deleteButton.classList.add('btn', 'btn-danger', 'btn-sm', 'delete-image-btn');
                    deleteButton.textContent = 'Delete';
                    deleteButton.addEventListener('click', function() {
                        container.remove();
                    });

                    container.appendChild(img);
                    container.appendChild(deleteButton);
                    preview.appendChild(container);
                };
                reader.readAsDataURL(file);
            });
        }
    }
</script>

<style>
.image-container {
    display: inline-flex;
    flex-direction: column;
    align-items: center;
    margin: 10px;
    position: relative;
}

.image-container img {
    max-height: 200px;
    margin-bottom: 5px;
}

.delete-image-btn {
    position: absolute;
    bottom: 5px;
    right: 25%;
}
</style>
