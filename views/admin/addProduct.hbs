{{> admin-header}}
<div class="content">
    <div class="container mt-5">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3>Add Product</h3>
            <div>
                <a href="/product/index" class="btn btn-outline-secondary me-2">Cancel</a>
                <button form="addProductForm" class="btn btn-outline-primary">Add Product</button>
            </div>
        </div>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb ms-1 mt-3">
                <li class="breadcrumb-item"><a href="/user/admin/dashboard">Dashboard</a></li>
                <li class="breadcrumb-item"><a href="/product/index">Products</a></li>
                <li class="breadcrumb-item active" aria-current="page">Add Product</li>
            </ol>
        </nav>
        <form id="addProductForm" action="/product/add" class="mt-3" method="POST" enctype="multipart/form-data">
            <div class="form-group">
                <label for="title">Title:</label>
                <input type="text" class="form-control" name="title" id="title">
                <span class="error" id="error-title"></span>
            </div>
            <div class="form-group">
                <label for="description">Description:</label>
                <textarea class="form-control" name="description" id="description" style="height: 200px"></textarea>
                <span class="error" id="error-description"></span>
            </div>
            <div class="form-group">
                <label for="category">Category:</label>
                <select class="form-control form-select" name="category" id="category">
                    <option value="">Select Category</option>
                    {{#each categories}}
                    <option value="{{this._id}}">{{this.title}}</option>
                    {{/each}}
                </select>
                <span class="error" id="error-category"></span>
            </div>
            <div class="form-group">
                <label for="brand">Brand:</label>
                <select class="form-control form-select" name="brand" id="brand">
                    <option value="">Select Brand</option>
                    <option value="Apple">Apple</option>
                    <option value="Samsung">Samsung</option>
                    <option value="Lenovo">Lenovo</option>
                    <option value="Oneplus">Oneplus</option>
                    <option value="Huawei">Huawei</option>
                    <option value="Oppo">Oppo</option>
                </select>
                <span class="error" id="error-brand"></span>
            </div>
            <div class="form-group">
                <label for="price">Price:</label>
                <input type="number" class="form-control" name="price" id="price">
                <span class="error" id="error-price"></span>
            </div>
            <div class="form-group">
                <label for="stock_count">Stock Count:</label>
                <input type="number" class="form-control" name="stock_count" id="stock_count">
                <span class="error" id="error-stock_count"></span>
            </div>
            <div class="form-group mt-3">
                <label for="images">Images:</label>
                <input type="file" class="form-control-file" name="images" id="images" accept="image/*" multiple onchange="previewImages()" required>
            </div>
            <div class="form-group mt-2" id="image-preview"></div>
        </form>
    </div>
</div>

<!-- Modal for image cropping -->
<div class="modal fade" id="cropModal" tabindex="-1" role="dialog" aria-labelledby="cropModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="crop-container"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="cropImage()">Crop</button>
            </div>
        </div>
    </div>
</div>

<script>
    let cropper;
    let selectedFileIndex;
    let croppedImages = []; // To store the cropped images
    const maxImages = 5;

    function previewImages() {
        const preview = document.getElementById('image-preview');
        preview.innerHTML = '';
        const files = document.getElementById('images').files;

        if (files.length > maxImages) {
            Swal.fire({
                title: 'Error',
                text: `You can upload a maximum of ${maxImages} images.`,
                icon: 'error'
            });
            document.getElementById('images').value = ""; // Clear the file input
            return;
        }

        if (files) {
            Array.from(files).forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const div = document.createElement('div');
                    div.classList.add('img-thumbnail-container');
                    div.dataset.index = index;

                    const img = document.createElement('img');
                    img.src = e.target.result;
                    div.appendChild(img);

                    const buttonContainer = document.createElement('div');
                    buttonContainer.classList.add('button-container');

                    const cropBtn = document.createElement('button');
                    cropBtn.type = 'button'; // Set type to button
                    cropBtn.classList.add('btn', 'btn-warning');
                    cropBtn.innerText = 'Crop';
                    cropBtn.onclick = () => openCropModal(file, index);
                    buttonContainer.appendChild(cropBtn);

                    const deleteBtn = document.createElement('button');
                    deleteBtn.type = 'button'; // Set type to button
                    deleteBtn.classList.add('btn', 'btn-danger');
                    deleteBtn.innerText = 'Delete';
                    deleteBtn.onclick = () => deleteImage(index);
                    buttonContainer.appendChild(deleteBtn);

                    div.appendChild(buttonContainer);
                    preview.appendChild(div);
                };
                reader.readAsDataURL(file);
            });
        }
    }

    function openCropModal(file, index) {
        selectedFileIndex = index;
        const reader = new FileReader();
        reader.onload = (e) => {
            const cropContainer = document.getElementById('crop-container');
            cropContainer.innerHTML = '';
            const img = document.createElement('img');
            img.src = e.target.result;
            cropContainer.appendChild(img);

            cropper = new Cropper(img, {
                aspectRatio: 1,
                viewMode: 1,
            });

            $('#cropModal').modal('show');
        };
        reader.readAsDataURL(file);
    }

    function cropImage() {
        const canvas = cropper.getCroppedCanvas();
        canvas.toBlob((blob) => {
            const file = new File([blob], document.getElementById('images').files[selectedFileIndex].name, { type: 'image/jpeg' });
            croppedImages[selectedFileIndex] = file;

            const url = URL.createObjectURL(blob);
            const img = document.querySelector(`#image-preview div[data-index='${selectedFileIndex}'] img`);
            img.src = url;
            $('#cropModal').modal('hide');
        }, 'image/jpeg');
    }

    function deleteImage(index) {
        const files = document.getElementById('images').files;
        const fileArray = Array.from(files);
        fileArray.splice(index, 1);
        croppedImages.splice(index, 1); // Remove the cropped image

        const dataTransfer = new DataTransfer();
        fileArray.forEach(file => dataTransfer.items.add(file));
        document.getElementById('images').files = dataTransfer.files;

        previewImages();
    }

    // Replace the form submission process to include the cropped images
    document.getElementById('addProductForm').addEventListener('submit', async function(event) {
        event.preventDefault(); // Prevent the default form submission

        const formData = new FormData(this);
        const input = document.getElementById('images');
        const dataTransfer = new DataTransfer();

        croppedImages.forEach((file, index) => {
            if (file) {
                dataTransfer.items.add(file);
            } else {
                dataTransfer.items.add(input.files[index]);
            }
        });

        input.files = dataTransfer.files;

        for (const [key, value] of formData.entries()) {
            if (key === 'images') {
                formData.delete(key);
            }
        }

        Array.from(input.files).forEach((file, index) => {
            formData.append('images', file, file.name);
        });

        try {
            const response = await fetch(this.action, {
                method: this.method,
                body: formData
            });

            if (response.ok) {
                Swal.fire({
                    title: 'Success',
                    text: 'Product added successfully!',
                    icon: 'success'
                }).then(() => {
                    window.location.href = "/product/index";
                });
            } else {
                const errorData = await response.json();
                handleErrors(errorData.errors);
            }
        } catch (error) {
            Swal.fire({
                title: 'Error',
                text: 'An error occurred while adding the product. Please try again.',
                icon: 'error'
            });
        }
    });

    function handleErrors(errors) {
  // Clear previous error messages
  document.querySelectorAll('.error').forEach(error => error.textContent = '');

  if (errors) {
    Object.keys(errors).forEach(key => {
      showError(`error-${key}`, errors[key].msg);
    });
  }
}

function showError(elementId, message) {
  const errorElement = document.getElementById(elementId);
  if (errorElement) {
    errorElement.textContent = message;
  }
}
</script>



<style>
/* Container for image thumbnails */
#image-preview {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

/* Individual image thumbnail container */
.img-thumbnail-container {
    position: relative;
    display: inline-block;
    margin: 10px;
}

/* Image thumbnail */
.img-thumbnail-container img {
    max-height: 200px;
    border: 2px solid #ddd;
    border-radius: 5px;
}

/* Button container for crop and delete buttons */
.button-container {
    display: flex;
    justify-content: space-between;
    margin-top: 5px;
}

/* Crop button */
.img-thumbnail-container .btn-warning {
    margin-right: 5px;
}

/* Delete button */
.img-thumbnail-container .btn-danger {
    margin-left: 5px;
}
</style>


{{!-- 
{{> admin-header}}
<div class="content">
    <div class="container mt-5">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3>Add Product</h3>
            <div>
                <a href="/product/index" class="btn btn-outline-secondary me-2">Cancel</a>
                <button form="addProductForm" class="btn btn-outline-primary">Add Product</button>
            </div>
        </div>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/user/admin/dashboard">Dashboard</a></li>
                <li class="breadcrumb-item"><a href="/product/index">Products</a></li>
                <li class="breadcrumb-item active" aria-current="page">Add Product</li>
            </ol>
        </nav>
        <form id="addProductForm" class="mt-3" enctype="multipart/form-data">
            <div class="form-group">
                <label for="title">Title:</label>
                <input type="text" class="form-control" name="title" id="title">
                <span class="error" id="error-title"></span>
            </div>
            <div class="form-group">
                <label for="description">Description:</label>
                <textarea class="form-control" name="description" id="description" style="height: 200px"></textarea>
                <span class="error" id="error-description"></span>
            </div>
            <div class="form-group">
                <label for="category">Category:</label>
                <select class="form-control" name="category" id="category">
                    {{#each categories}}
                        <option value="{{this._id}}">{{this.title}}</option>
                    {{/each}}
                </select>
            </div>
            <div class="form-group">
                <label for="brand">Brand:</label>
                <select class="form-control" name="brand" id="brand">
                    <option value="Apple">Apple</option>
                    <option value="Samsung">Samsung</option>
                    <option value="Lenovo">Lenovo</option>
                    <option value="Oneplus">Oneplus</option>
                    <option value="Huawei">Huawei</option>
                </select>
            </div>
            <div class="form-group">
                <label for="price">Price:</label>
                <input type="number" class="form-control" name="price" id="price">
                <span class="error" id="error-price"></span>
            </div>
            <div class="form-group">
                <label for="stock_count">Stock Count:</label>
                <input type="number" class="form-control" name="stock_count" id="stock_count">
                <span class="error" id="error-stock_count"></span>
            </div>
            <div class="form-group mt-3">
                <label for="images">Images:</label>
                <input type="file" class="form-control-file" name="images" id="images" accept="image/*" multiple onchange="previewImages()">
            </div>
            <div class="form-group mt-2" id="image-preview"></div>
        </form>
    </div>
</div>

<!-- Modal for image cropping -->
<div class="modal fade" id="cropModal" tabindex="-1" role="dialog" aria-labelledby="cropModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="crop-container"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="cropImage()">Crop</button>
            </div>
        </div>
    </div>
</div>




<script>

        document.getElementById('addProductForm').addEventListener('submit', async function(event) {
            event.preventDefault(); // Prevent the default form submission

            const title = document.getElementById('title').value.trim();
            const price = parseFloat(document.getElementById('price').value.trim());
            const stockCount = parseInt(document.getElementById('stock_count').value.trim());
            const files = document.getElementById('images').files;

            
            
            if (price < 0 && stockCount < 0) {
                showCustomAlert('Error', 'Price and stock count cannot be less than zero.');
                return;
            }

            if(stockCount && files.length === 0){
                showCustomAlert('Error', 'Choose an Image');
                return;
            }

            const form = event.target;
            const formData = new FormData(form);

            const data = {};
            formData.forEach((value, key) => {
                data[key] = value;
            });

            try {
                const response = await fetch('/product/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
                });

                if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Product added successfully!',
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    // Redirect to address/all page
                    location.href = '/product/index';
                });
                } else {
                // Handle error response
                const errorData = await response.json();
                handleErrors(errorData.errors);
                }
            } catch (error) {
                // Handle network error
                console.error('Network error:', error);
                Swal.fire({
                icon: 'error',
                title: 'Network Error',
                text: error.message
                });
            }
            });

            function showCustomAlert(title, message) {
                Swal.fire({
                    icon: 'error',
                    title: title,
                    text: message
                });
            }

            function handleErrors(errors) {
                // Clear previous error messages
                document.querySelectorAll('.error').forEach(error => error.textContent = '');

                if (errors) {
                    Object.keys(errors).forEach(key => {
                    showError(`error-${key}`, errors[key].msg);
                    });
                }
            }

            function showError(elementId, message) {
                const errorElement = document.getElementById(elementId);
                if (errorElement) {
                    errorElement.textContent = message;
                }
            }


        let cropper;
        let selectedFileIndex;
        let croppedImages = []; // To store the cropped images
        const maxImages = 5;



        function previewImages() {
            const preview = document.getElementById('image-preview');
            preview.innerHTML = '';
            const files = document.getElementById('images').files;

            if (files.length > maxImages) {
                Swal.fire({
                    title: 'Error',
                    text: `You can upload a maximum of ${maxImages} images.`,
                    icon: 'error'
                });
            document.getElementById('images').value = ""; // Clear the file input
            return;
        }

            if (files) {
                Array.from(files).forEach((file, index) => {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const div = document.createElement('div');
                        div.classList.add('img-thumbnail-container');

                        const img = document.createElement('img');
                        img.src = e.target.result;
                        div.appendChild(img);

                        const buttonContainer = document.createElement('div');
                        buttonContainer.classList.add('button-container');

                        const cropBtn = document.createElement('button');
                        cropBtn.type = 'button'; // Set type to button
                        cropBtn.classList.add('btn', 'btn-warning');
                        cropBtn.innerText = 'Crop';
                        cropBtn.onclick = () => openCropModal(file, index);
                        buttonContainer.appendChild(cropBtn);

                        const deleteBtn = document.createElement('button');
                        deleteBtn.type = 'button'; // Set type to button
                        deleteBtn.classList.add('btn', 'btn-danger');
                        deleteBtn.innerText = 'Delete';
                        deleteBtn.onclick = () => deleteImage(index);
                        buttonContainer.appendChild(deleteBtn);

                        div.appendChild(buttonContainer);
                        preview.appendChild(div);
                    };
                    reader.readAsDataURL(file);
                });
            }
        }

        function openCropModal(file, index) {
            selectedFileIndex = index;
            const reader = new FileReader();
            reader.onload = (e) => {
                const cropContainer = document.getElementById('crop-container');
                cropContainer.innerHTML = '';
                const img = document.createElement('img');
                img.src = e.target.result;
                cropContainer.appendChild(img);

                cropper = new Cropper(img, {
                    aspectRatio: 1,
                    viewMode: 1,
                });

                $('#cropModal').modal('show');
            };
            reader.readAsDataURL(file);
        }

        function cropImage() {
            const canvas = cropper.getCroppedCanvas();
            canvas.toBlob((blob) => {
                const file = new File([blob], document.getElementById('images').files[selectedFileIndex].name, { type: 'image/jpeg' });
                croppedImages[selectedFileIndex] = file;

                const url = URL.createObjectURL(blob);
                const img = document.querySelectorAll('#image-preview img')[selectedFileIndex];
                img.src = url;
                $('#cropModal').modal('hide');
            }, 'image/jpeg');
        }
        function deleteImage(index) {
            const files = document.getElementById('images').files;
            const fileArray = Array.from(files);
            fileArray.splice(index, 1);
            croppedImages.splice(index, 1); // Remove the cropped image

            const dataTransfer = new DataTransfer();
            fileArray.forEach(file => dataTransfer.items.add(file));
            document.getElementById('images').files = dataTransfer.files;

            previewImages();
        }

        // Replace the form submission process to include the cropped images
        document.getElementById('addProductForm').addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent the default form submission

            const formData = new FormData(this);
            const input = document.getElementById('images');
            const dataTransfer = new DataTransfer();

            croppedImages.forEach(file => {
                if (file) {
                    dataTransfer.items.add(file);
                }
            });

            input.files = dataTransfer.files;

            // Submit the form using XMLHttpRequest or Fetch API
            fetch(this.action, {
                method: this.method,
                body: new FormData(this)
            }).then(response => {
                if (response.ok) {
                    Swal.fire({
                        title: 'Success',
                        text: 'Product Added Successfully!',
                        icon: 'success'
                    }).then(() => {
                        window.location.href = '/product/index';
                    });
                } else {
                    // Handle errors
                }
            }).catch(error => {
                console.error('Error:', error);
            });
        });
</script>
<style>
/* Container for image thumbnails */
#image-preview {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

/* Individual image thumbnail container */
.img-thumbnail-container {
    position: relative;
    display: inline-block;
    margin: 10px;
}

/* Image thumbnail */
.img-thumbnail-container img {
    max-height: 250px;
    border: 2px solid #ddd;
    border-radius: 4px;
}

/* Container for buttons */
.img-thumbnail-container .button-container {
    position: absolute;
    bottom: 5px;
    left: 60px;
    display: flex;
    gap: 5px;
}

/* Crop and delete buttons */
.img-thumbnail-container .btn {
    font-size: 12px;
    padding: 5px 10px;
}
#cropModal .modal-dialog {
    max-width: 50%;
    height: 80%;
}

#crop-container img {
    height: 100%; /* Adjust as needed */
    width: 100%; /* Maintain aspect ratio */
    display: block; /* Ensure image displays properly */
    margin: auto; /* Center the image */
}



</style> --}}
